package com.github.exiostorm.main;

import static org.lwjgl.glfw.GLFW.*;
import static org.lwjgl.opengl.GL11.*;
import static org.lwjgl.system.MemoryUtil.*;

import org.lwjgl.glfw.GLFW;
import org.lwjgl.glfw.GLFWVidMode;
//import org.lwjgl.opengl.GLContext;


public class failedloopattempt implements Runnable {
	
	private int width = 1280;
	private int height = 720;
	private boolean fullScreen;
	
	private Thread thread;
	private boolean running = true;
	
	private static Long window;
	
	
	private void start() {
		running = false;
		thread = new Thread(this, "Game");
		thread.start();
	}
	public void run() {
		init();
		while (running) {
			update();
			render();
			System.out.println(shouldClose());
			if (shouldClose())
				running = false;
		}
	}
	private boolean shouldClose() {
		return glfwWindowShouldClose(window);
	}
	private void update() {
		glfwPollEvents();
	}
	private void render() {
		GLFW.glfwSwapBuffers(window);
		
	}
	
	private void init() {
		glfwWindowHint(GLFW_VISIBLE, GL_TRUE);
		glfwWindowHint(GLFW_RESIZABLE, GL_TRUE);
		window = glfwCreateWindow(width, height, "GameTest", NULL, NULL);
		if (window == NULL) throw new RuntimeException("Failed to create Window");
		glfwSetWindowPos(window, (getMonitorWidth() - width) / 2, (getMonitorHeight() - height) / 2);
		glfwMakeContextCurrent(window);
		//glfwSwapInterval(1);
		glfwShowWindow(window);
	}

	public int getMonitorWidth(){
		GLFWVidMode vidmode = glfwGetVideoMode(glfwGetPrimaryMonitor());
		return vidmode.width();
		}
	public int getMonitorHeight(){
		GLFWVidMode vidmode = glfwGetVideoMode(glfwGetPrimaryMonitor());
		return vidmode.height();
		}
	
	public static void main(String[] args) {
		new failedloopattempt().start();
	}

}
